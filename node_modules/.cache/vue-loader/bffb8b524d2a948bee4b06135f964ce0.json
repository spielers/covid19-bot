{"remainingRequest":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\hackathon\\jhu-covid19bot-web-master\\src\\Views\\App.vue?vue&type=style&index=0&lang=sass&","dependencies":[{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\src\\Views\\App.vue","mtime":1588333273963},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICdAL1N0eWxlL1RoZW1lLnNhc3MnCgpib2R5CiAgICBtYXJnaW46IDAKICAgIHBhZGRpbmc6IDAKICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250KQogICAgZm9udC1kaXNwbGF5OiBzd2FwCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kKQoKLmNvbnRhaW5lcgogICAgbWF4LXdpZHRoOiA1MDBweAogICAgbWFyZ2luLWxlZnQ6IGF1dG8KICAgIG1hcmdpbi1yaWdodDogYXV0bwogICAgcGFkZGluZzogMTJweAogICAgcG9zaXRpb246IHJlbGF0aXZlCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src/Views","sourcesContent":["<template>\n    <main id=\"app\">\n        <!-- TopHead is the header with the information about the app -->\n        <TopHead>\n            <!-- Audio toggle (on the top right corner), used to toggle the audio output, default mode is defined in the settings -->\n            <button\n                class=\"audio-toggle\"\n                :title=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                :aria-label=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                @click=\"muted = !muted\">\n                <i aria-hidden=\"true\" class=\"material-icons\">{{muted ? 'volume_off': 'volume_up'}}</i>\n            </button>\n        </TopHead>\n\n        <section class=\"container chat-container\">\n            <Error v-if=\"error\" :error=\"error\" />\n            \n            <RichComponent>\n                <Bubble :text=\"'Greetings! I am here to help answer your questions about COVID-19. To make sure that I understand your question, please keep the question simple. The information that you share with me will be used to support research, education, and technology development. Please do not share any personally identifiable information (like your name, location, or age) with me. So, let\\'s get started! You could start by asking me one of the questions below, or a new question:'\" />\n            </RichComponent>\n            <!-- Messages Table -->\n            <section v-if=\"messages\" aria-live=\"polite\">\n                <div v-for=\"message in messages\" id=\"message\" :key=\"message.responseId\">\n                    <!-- My message -->\n                    <BubbleWrapper><Bubble v-if=\"message.queryResult.queryText\" :text=\"message.queryResult.queryText\" me /></BubbleWrapper>\n\n                    <!-- Fulfillment text -->\n                    <RichComponent>\n                        <Bubble v-if=\"message.queryResult.fulfillmentText\" :text=\"message.queryResult.fulfillmentText\" />\n                    </RichComponent>\n\n                    <!-- Dialogflow Components -->\n                    <RichComponent v-for=\"(component, component_id) in message.queryResult.fulfillmentMessages\" :key=\"component_id\">\n                        <!-- ListSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#ListSelect) -->\n                        <List\n                            v-if=\"component.listSelect\"\n                            :title=\"component.listSelect.title\"\n                            :subtitle=\"component.listSelect.subtitle\">\n                            <ListItem\n                                v-for=\"item in component.listSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :description=\"item.description\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </List>\n                    </RichComponent>\n\n                    <!-- Actions on Google Components -->\n                    <section v-if=\"message.queryResult.webhookPayload && message.queryResult.webhookPayload.google\">\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.richResponse.items\" :key=\"component_id\">\n                            <!-- List (https://developers.google.com/actions/assistant/responses#list) -->\n                            <List\n                                v-if=\"component.listSelect\"\n                                :title=\"component.listSelect.title\"\n                                :subtitle=\"component.listSelect.subtitle\">\n                                <ListItem\n                                    v-for=\"item in component.listSelect.items\"\n                                    :key=\"item.info.key\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    @click.native=\"send({text: item.info.key})\"\n                                />\n                            </List>\n                        </RichComponent>\n\n                        <!-- Visual Selection Responses (https://developers.google.com/actions/assistant/responses#visual_selection_responses) -->\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.systemIntent\" :key=\"component_id\">\n                            <!-- List (https://developers.google.com/actions/assistant/responses#list) -->\n                            <List\n                                v-if=\"component.listSelect\"\n                                :title=\"component.listSelect.title\"\n                                :subtitle=\"component.listSelect.subtitle\">\n                                <ListItem\n                                    v-for=\"item in component.listSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </List>\n                        </RichComponent>\n                    </section>\n                </div>\n                <div v-if=\"loading\" id=\"message\">\n                    <!-- My message (Loading) -->\n                    <BubbleWrapper><Bubble me loading aria-hidden=\"true\" /></BubbleWrapper>\n\n                    <!-- Default / Webhook bubble (Loading) -->\n                    <Bubble loading aria-hidden=\"true\" />\n                </div>\n            </section>\n        </section>\n\n        <!-- ChatInput is made for submitting queries and displaying suggestions -->\n        <ChatInput ref=\"input\" @submit=\"send\">\n            <!-- Suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#QuickReplies\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Suggestions\n            -->\n            <Suggestion\n                v-for=\"(suggestion, suggestion_id) in suggestions.text_suggestions\"\n                :key=\"suggestion_id\"\n                :title=\"suggestion\"\n                @click.native=\"send({text: suggestion})\"\n            />\n\n            <!-- Link suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#LinkOutSuggestion\n            -->\n            <Suggestion\n                v-if=\"suggestions.link_suggestion\"\n                :title=\"suggestions.link_suggestion.destinationName\"\n                :url=\"suggestions.link_suggestion.uri || suggestions.link_suggestion.url\"\n            />\n        </ChatInput>\n    </main>\n</template>\n\n<style lang=\"sass\">\n@import '@/Style/Theme.sass'\n\nbody\n    margin: 0\n    padding: 0\n    font-family: var(--font)\n    font-display: swap\n    background-color: var(--background)\n\n.container\n    max-width: 500px\n    margin-left: auto\n    margin-right: auto\n    padding: 12px\n    position: relative\n</style>\n\n<style lang=\"sass\" scoped>\n.chat-container\n    padding-top: 70px\n    padding-bottom: 125px\n</style>\n\n<script>\nimport Welcome from './Welcome.vue'\n\nimport Error from '@/Components/Parts/Error.vue'\nimport TopHead from '@/Components/Parts/TopHead.vue'\nimport ChatInput from '@/Components/Parts/ChatInput.vue'\n\nimport RichComponent from '@/Components/Rich/Component.vue'\nimport Bubble from '@/Components/Rich/Bubble.vue'\nimport BubbleWrapper from '@/Components/Rich/BubbleWrapper.vue'\nimport Card from '@/Components/Rich/Card.vue'\nimport CardButton from '@/Components/Rich/CardButton.vue'\nimport Carousel from '@/Components/Rich/Carousel.vue'\nimport List from '@/Components/Rich/List.vue'\nimport ListItem from '@/Components/Rich/ListItem.vue'\nimport Picture from '@/Components/Rich/Picture.vue'\nimport Media from '@/Components/Rich/Media.vue'\nimport TableCard from '@/Components/Rich/TableCard.vue'\nimport Suggestion from '@/Components/Rich/Suggestion.vue'\n\nimport * as uuidv1 from 'uuid/v1'\n\nimport { Client } from 'dialogflow-gateway'\n\nfunction urlify(text) {\n    var urlRegex =/(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n    return text.replace(urlRegex, function(url) {\n        return '<a class=\"b\" href=\"' + url + '\" target=\"_blank\">' + url + '</a>';\n    })\n    // or alternatively\n    // return text.replace(urlRegex, '<a href=\"$1\">$1</a>')\n}\n\nexport default {\n    name: 'App',\n    components: {\n        Welcome,\n        Error,\n        TopHead,\n        ChatInput,\n        RichComponent,\n        Bubble,\n        BubbleWrapper,\n        Card,\n        CardButton,\n        Carousel,\n        List,\n        ListItem,\n        Picture,\n        Media,\n        TableCard,\n        Suggestion\n    },\n    data(){\n        return {\n            app: null,\n            messages: [],\n            language: '',\n            session: '',\n            muted: true,\n            loading: false,\n            error: null,\n            client: new new Client(this.config.endpoint).connect()\n        }\n    },\n    computed: {\n        /* The code below is used to extract suggestions from last message, to display it on ChatInput */\n        suggestions(){\n            if (this.messages.length > 0){\n                const last_message = this.messages[this.messages.length - 1]\n                const suggestions = []\n\n                /* Dialogflow Suggestions */\n                for (const component in last_message.queryResult.fulfillmentMessages){\n                    if (last_message.queryResult.fulfillmentMessages[component].suggestions) suggestions.text_suggestions = last_message.queryResult.fulfillmentMessages[component].suggestions.suggestions.map(suggestion => suggestion.title)\n                    if (last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion) suggestions.link_suggestion = last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion\n                    if (last_message.queryResult.fulfillmentMessages[component].quickReplies) suggestions.text_suggestions = last_message.queryResult.fulfillmentMessages[component].quickReplies.quickReplies\n                }\n\n                /* Google Suggestions */\n                if (last_message.queryResult.webhookPayload && last_message.queryResult.webhookPayload.google){\n                    for (const component in last_message.queryResult.webhookPayload.google){\n                        if (last_message.queryResult.webhookPayload.google[component].suggestions) suggestions.text_suggestions = last_message.queryResult.webhookPayload.google[component].suggestions.map(suggestion => suggestion.title)\n                        if (last_message.queryResult.webhookPayload.google[component].linkOutSuggestion) suggestions.link_suggestion = last_message.queryResult.webhookPayload.google[component].linkOutSuggestion\n                    }\n                }\n\n                return suggestions\n            }\n\n            return {\n                text_suggestions: this.config.start_suggestions // <- if no messages are present, return start_suggestions, from config.js to help user figure out what he can do with your application\n            }\n        }\n    },\n    watch: {\n        /* This function is triggered, when new messages arrive */\n        messages(messages){\n            if (this.history()) sessionStorage.setItem('message_history', JSON.stringify(messages)) // <- Save history if the feature is enabled\n        },\n        /* This function is triggered, when request is started or finished */\n        loading(){\n            setTimeout(() => {\n                const app = document.querySelector('#app') // <- We need to scroll down #app, to prevent the whole page jumping to bottom, when using in iframe\n                if (app.querySelector('#message')){\n                    const message = app.querySelectorAll('#message')[app.querySelectorAll('#message').length - 1].offsetTop - 68\n                    window.scrollTo({top: message, behavior: 'smooth'})\n                }\n            }, 2) // <- wait for render (timeout) and then smoothly scroll #app down to the last message\n        }\n    },\n    created(){\n        /* If history is enabled, the messages are retrieved from sessionStorage */\n        if (this.history() && sessionStorage.getItem('message_history') !== null){\n            this.messages = JSON.parse(sessionStorage.getItem('message_history'))\n        }\n\n        /* Session should be persistent (in case of page reload, the context should stay) */\n        if (this.history() && sessionStorage.getItem('session') !== null){\n            this.session = sessionStorage.getItem('session')\n        }\n\n        else {\n            this.session = uuidv1()\n            if (this.history()) sessionStorage.setItem('session', this.session)\n        }\n\n        /* Cache Agent (this will save bandwith) */\n        if (this.history() && sessionStorage.getItem('agent') !== null){\n            this.app = JSON.parse(sessionStorage.getItem('agent'))\n        }\n\n        else {\n            \n        }\n    },\n    methods: {\n        send(submission){\n            let request\n\n            /* Text request */\n            if (submission.text){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        text: {\n                            text: submission.text,\n                            languageCode: this.lang()\n                        }\n                    }\n                }\n            }\n\n            /* Audio request */\n            else if (submission.audio){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        audioConfig: {\n                            audioEncoding: 'AUDIO_ENCODING_UNSPECIFIED',\n                            languageCode: this.lang()\n                        }\n                    },\n                    inputAudio: submission.audio\n                }\n            }\n\n            this.loading = true\n            this.error = null\n\n            /* Make the request to gateway */\n            this.client.send(request)\n            .then(response => {\n                if (response.queryResult.fulfillmentText) {\n                    response.queryResult.fulfillmentText = urlify(response.queryResult.fulfillmentText)\n                }\n                this.messages.push(response)\n                this.handle(response) // <- trigger the handle function (explanation below)\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n            .then(() => this.loading = false)\n        },\n        handle(response){\n            /* This function is used for speech output */\n            if (response.outputAudio){\n                const output = new Audio(`data:audio/mp3;base64,${response.outputAudio}`)\n                output.onended = () => this.$refs.input.listen()\n\n                if (!this.muted) output.play()\n            }\n\n            else {\n                let text // <- init a text variable\n\n                /* Dialogflow Text/SimpleResponses */\n                for (const component in response.queryResult.fulfillmentMessages){\n                    if (response.queryResult.fulfillmentMessages[component].text) text = response.queryResult.fulfillmentMessages[component].text.text[0]\n                    if (response.queryResult.fulfillmentMessages[component].simpleResponses) text = response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech\n                }\n\n                /* Actions on Google Simple response */\n                if (response.queryResult.webhookPayload && response.queryResult.webhookPayload.google){\n                    for (const component in response.queryResult.webhookPayload.google){\n                        if (response.queryResult.webhookPayload.google[component].simpleResponse) text = response.queryResult.webhookPayload.google[component].simpleResponse.textToSpeech\n                    }\n                }\n\n                const speech = new SpeechSynthesisUtterance(text)\n                speech.voiceURI = this.config.voice\n                speech.lang = this.lang()\n                speech.onend = () => this.$refs.input.listen()\n\n                if (!this.muted) window.speechSynthesis.speak(speech) // <- if app is not muted, speak out the speech\n            }\n        }\n    }\n}\n</script>"]}]}