{"remainingRequest":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\hackathon\\jhu-covid19bot-web-master\\src\\Components\\Parts\\ChatInput.vue?vue&type=style&index=0&id=58da613a&lang=sass&scoped=true&","dependencies":[{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\src\\Components\\Parts\\ChatInput.vue","mtime":1587562930000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\hackathon\\jhu-covid19bot-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJ0AvU3R5bGUvTWl4aW5zJwoKLmJvdHRvbWNoYXQKICAgIHBvc2l0aW9uOiBmaXhlZAogICAgYm90dG9tOiAwCiAgICBsZWZ0OiAwCiAgICB3aWR0aDogMTAwJQogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZCkKICAgIHBhZGRpbmctYm90dG9tOiA4cHgKCi5mbGV4aWJsZQogICAgZGlzcGxheTogZmxleAoKLnN1Z2dlc3Rpb25zCiAgICBvdmVyZmxvdy14OiBzY3JvbGwKICAgIG92ZXJmbG93LXk6IGhpZGRlbgogICAgd2hpdGUtc3BhY2U6IG5vd3JhcAogICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoCgogICAgJjo6LXdlYmtpdC1zY3JvbGxiYXIKICAgICAgICBkaXNwbGF5OiBub25lCgouaW5wdXQKICAgIG1hcmdpbi1sZWZ0OiA1cHgKICAgIGZvbnQtc2l6ZTogMTZweAogICAgZm9udC13ZWlnaHQ6IDUwMAogICAgd2lkdGg6IDEwMCUKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3gKICAgIGJvcmRlcjogbm9uZQogICAgcGFkZGluZzogMTBweCAxMnB4CiAgICBjb2xvcjogdmFyKC0tdGV4dCkKICAgIGJvcmRlci1yYWRpdXM6IDQwcHgKICAgIGZsZXg6IDEgMCAwCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbGVtZW50LWJhY2tncm91bmQpCgogICAgJjpmb2N1cwogICAgICAgIG91dGxpbmU6IDAgIWltcG9ydGFudAoKLmJ1dHRvbgogICAgQGluY2x1ZGUgcmVzZXQKICAgIHBhZGRpbmc6IDhweAogICAgbWFyZ2luLWxlZnQ6IDZweAogICAgbWFyZ2luLXJpZ2h0OiA1cHgKICAgIGJvcmRlci1yYWRpdXM6IDUwJQogICAgY3Vyc29yOiBwb2ludGVyCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbGVtZW50LWJhY2tncm91bmQpCiAgICBjb2xvcjogdmFyKC0tdGV4dCkKICAgIGZvbnQtc2l6ZTogMjRweAogICAgZGlzcGxheTogZmxleAoKICAgICY6Zm9jdXMKICAgICAgICBvdXRsaW5lOiAwICFpbXBvcnRhbnQKCiAgICAmLm1pY19hY3RpdmUKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjQ0MzM2CiAgICAgICAgY29sb3I6IHdoaXRlCg=="},{"version":3,"sources":["ChatInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"ChatInput.vue","sourceRoot":"src/Components/Parts","sourcesContent":["<template>\n    <div class=\"bottomchat\">\n        <div class=\"container\">\n            <!-- Here are the suggestions -->\n            <div class=\"suggestions\"><slot /></div>\n            <div class=\"flexible\">\n                <!-- Text input -->\n                <input\n                    v-model=\"query\"\n                    class=\"input\"\n                    type=\"text\"\n                    autofocus\n                    :placeholder=\"(translations[lang()] && translations[lang()].inputTitle) || translations[config.fallback_lang].inputTitle\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].inputTitle) || translations[config.fallback_lang].inputTitle\"\n                    @keypress.enter=\"submit({text: query})\"\n                    @focus=\"microphone = false; should_listen = false\">\n\n                <!-- Send message button (arrow button) -->\n                <button\n                    v-if=\"!microphone && query.length > 0 || !microphone_supported\"\n                    class=\"button\"\n                    :title=\"(translations[lang()] && translations[lang()].sendTitle) || translations[config.fallback_lang].sendTitle\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].sendTitle) || translations[config.fallback_lang].sendTitle\"\n                    @click=\"submit({text: query})\">\n                    <i class=\"material-icons\" aria-hidden=\"true\">arrow_upward</i>\n                </button>\n\n                <!-- Microphone Button -->\n                <button\n                    v-else\n                    class=\"button\"\n                    :aria-label=\"(translations[lang()] && translations[lang()].microphoneTitle) || translations[config.fallback_lang].microphoneTitle\"\n                    :title=\"(translations[lang()] && translations[lang()].microphoneTitle) || translations[config.fallback_lang].microphoneTitle\"\n                    :class=\"{'mic_active': microphone}\"\n                    @click=\"microphone = !microphone\">\n                    <i class=\"material-icons\" aria-hidden=\"true\">mic</i>\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style lang=\"sass\" scoped>\n@import '@/Style/Mixins'\n\n.bottomchat\n    position: fixed\n    bottom: 0\n    left: 0\n    width: 100%\n    background-color: var(--background)\n    padding-bottom: 8px\n\n.flexible\n    display: flex\n\n.suggestions\n    overflow-x: scroll\n    overflow-y: hidden\n    white-space: nowrap\n    -webkit-overflow-scrolling: touch\n\n    &::-webkit-scrollbar\n        display: none\n\n.input\n    margin-left: 5px\n    font-size: 16px\n    font-weight: 500\n    width: 100%\n    box-sizing: border-box\n    border: none\n    padding: 10px 12px\n    color: var(--text)\n    border-radius: 40px\n    flex: 1 0 0\n    background-color: var(--element-background)\n\n    &:focus\n        outline: 0 !important\n\n.button\n    @include reset\n    padding: 8px\n    margin-left: 6px\n    margin-right: 5px\n    border-radius: 50%\n    cursor: pointer\n    background-color: var(--element-background)\n    color: var(--text)\n    font-size: 24px\n    display: flex\n\n    &:focus\n        outline: 0 !important\n\n    &.mic_active\n        background-color: #F44336\n        color: white\n</style>\n\n<script>\nimport AudioRecorder from 'audio-recorder-polyfill'\nimport * as hark from 'hark'\nwindow.MediaRecorder = AudioRecorder\n\nexport default {\n    name: 'ChatInput',\n    data(){\n        return {\n            query: '',\n            microphone: false,\n            recognition: null,\n            recorder: null,\n            should_listen: false\n        }\n    },\n    computed: {\n        microphone_supported(){\n            return window.webkitSpeechRecognition || window.SpeechRecognition || !window.MediaRecorder.notSupported\n        }\n    },\n    watch: {\n        /* Toggle microphone */\n        microphone(activate){\n            if (activate){\n                this.should_listen = true\n                if (window.webkitSpeechRecognition || window.SpeechRecognition){\n                    this.recognition = new window.webkitSpeechRecognition() || new window.SpeechRecognition()\n                    this.recognition.interimResults = true\n                    this.recognition.lang = this.lang()\n                    this.recognition.onresult = event => {\n                        for (let i = event.resultIndex; i < event.results.length; ++i){\n                            this.query = event.results[i][0].transcript // <- push results to the Text input\n                        }\n                    }\n                    this.recognition.onend = () => {\n                        this.recognition.stop()\n                        this.microphone = false\n                        this.submit({text: this.query}) // <- submit the result\n                    }\n                    this.recognition.onerror = () => this.microphone = false\n                    this.recognition.start()\n                }\n                else if (window.MediaRecorder){\n                    if (window.MediaRecorder){\n                        navigator.mediaDevices.getUserMedia({audio: true})\n                        .then(stream => {\n                            this.recorder = new window.MediaRecorder(stream)\n                            this.recorder.addEventListener('dataavailable', recording => {\n                                const reader = new FileReader()\n                                reader.readAsDataURL(recording.data)\n                                reader.onloadend = () => {\n                                    this.submit({audio: reader.result.replace(/^data:.+;base64,/, '')})\n                                }\n                            })\n                            hark(this.recorder.stream).on('stopped_speaking', () => this.microphone = false) // <- Speech end detection\n                            this.recorder.start()\n                        })\n                        .catch(() => this.microphone = false)\n                    }\n                }\n            }\n\n            else if (this.recognition) this.recognition.abort()\n            else if (this.recorder) this.recorder.stop()\n        }\n    },\n    methods: {\n        listen(){\n            if (this.should_listen) this.microphone = true\n        },\n        submit(submission){\n            if (submission.text && submission.text.length > 0){\n                this.$emit('submit', submission)\n                this.query = ''\n            }\n\n            else if (submission.audio) this.$emit('submit', submission)\n        }\n    }\n}\n</script>"]}]}